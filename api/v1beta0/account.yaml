# This is ignored by Swagger, but we use it for DRY YAML definitions
x-dry-yaml-definitions:
  scopeProperty: &scopeProperty
        type: string
        enum:
          - scalr
          - account
          - environment
          - farm
          - farmrole
          - server
  architecture: &architectureProperty
    type: string
    enum:
      - i386
      - x86_64
  cloudLocationProperties: &cloudLocationProperties
    cloudPlatform:
      description: "Cloud Platform this resources resides in."
      type: string
      enum:
        - ec2
        - gce
        - azure
        # cloudstack based
        - cloudstack
        - idcf
        # openstack based
        - openstack
        - ocs
        - rackspacenguk
        - rackspacengus
        - hpcloud
        - mirantis
        - vio
        - cisco
    cloudLocation:
      description: "More precise Cloud Location (within a given Cloud Platform) for this resource. May be null if this resource does not have a location (and is global to the platform). Note that if you'd like to filter on this property, you **must** also filter on `cloudPlatform`."
      type: string
  openstackProvider: &openstackProvider
    description: Cloud provider that should be specified for OpenStack based clouds.
    type: string
    enum:
      - openstack
      - ocs
      - hpcloud
      - mirantis
      - vio
      - cisco
  cloudstackProvider: &cloudstackProvider
    description: Cloud provider that should be specified for CloudStack based clouds.
    type: string
    enum:
      - cloudstack
      - idcf

swagger: '2.0'

info:
  version: '1.0.0'
  title: Scalr Account API
  description: 'Manage Roles, Images, Environments and etc.'

basePath: '/api/v1beta0/account'

produces:
  - application/json

parameters:
  # TODO - automate generation of those
  globalVariableName:
    name: globalVariableName
    description: The name of the Global Variable being accessed.
    in: path
    type: string
    required: true

  cloudCredentialsId:
    name: cloudCredentialsId
    description: The name of the Cloud Credentials being accessed
    in: path
    type: string
    required: true

responses:
  clientError:
    description: A client-side error was made
    schema:
      $ref: '#/definitions/ApiErrorResponse'
    x-errorCodes:
      # InvalidStructure is when the request was missing a required parameter, etc.
      - name: InvalidStructure
        description: "Your request is structurally incorrect, and was not understood by the API."

      # InvalidValue is when we found the data we expected, but it didn't pass validation (FK didn't exist,
      # field didn't match regex).
      - name: InvalidValue  # Consider renaming BadValue
        description: "Your request was understood by the API, but included data that is not acceptable."

      # BadRequest is when the request didn't make any sense (i.e. last option).
      - name: BadRequest
        description: "Your request wasn't understood by the API."

  authenticationError:
    description: Request was not authenticated
    schema:
      $ref: '#/definitions/ApiErrorResponse'
    x-errorCodes:
      # BadAuthentication is when authentication failed.
      - name: BadAuthentication
        description: "Your request authentication failed to validate."


  permissionsError:
    description: Insufficient permissions
    schema:
      $ref: '#/definitions/ApiErrorResponse'
    x-errorCodes:
      - name: ScopeViolation
        description: "Your request should be made in a different Scope."

      - name: PermissionViolation
        description: "Your request requires permissions you do not have."

  notFoundError:
    description: Resource not found
    schema:
      $ref: '#/definitions/ApiErrorResponse'
    x-errorCodes:
      # EndpointNotFound is when the request is for a URL that doesn't exist to begin with.
      - name: EndpointNotFound
        description: "The route you are trying to access does not exist"
        noDoc: true

      # ObjectNotFound is when the request is for a URL that exists, but points to an object that doesn't
      # (e.g. bad ID)
      - name: ObjectNotFound
        description: "The URL you are trying to access does not exist"

  conflictError:
    description: Conflict with current state
    schema:
      $ref: '#/definitions/ApiErrorResponse'
    x-errorCodes:
      # ObjectInUse is when e.g. trying to delete an Image that is being used.
      - name: ObjectInUse
        description: "The changes you are trying to make aren't possible while this object is in use."

      # UnicityViolation is when e.g. trying to create an object whose name duplicates one.
      - name: UnicityViolation
        description: "The changes you are trying to make violate a unicity constraint."

  serverError:
    description: A server-side error occured
    schema:
      $ref: '#/definitions/ApiErrorResponse'

   # TODO - Add NotImplemented

paths:

  #######################
  # Orchestration Rules #
  #######################

  /orchestration-rules/:
      get:
        # Note: This returns only the Rules associated with this Account
        description: List Orchestration Rules in this Account.
        responses:
          200:
            $ref: '#/responses/orchestrationRuleList'
      post:
        description: Create a new Orchestration Rule for this Account
        parameters:
          - $ref: '#/parameters/orchestrationRuleObject'
        responses:
          201:
            $ref: '#/responses/orchestrationRuleDetail'

  /orchestration-rules/{orchestrationRuleId}/:
    parameters:
      - $ref: '#/parameters/orchestrationRuleId'
    get:
      description: Retrieve an Orchestration Rule
      responses:
        200:
          $ref: '#/responses/orchestrationRuleDetail'
    patch:
      description: Update an Orchestration rule
      parameters:
        - $ref: '#/parameters/orchestrationRuleObject'
      responses:
        202:
          $ref: '#/responses/orchestrationRuleDetail'
    delete:
      description: Delete an Orchestration Rule from this Account
      responses:
        200:
          $ref: '#/responses/deleteSuccessResponse'

  #################
  # Cost Centers #
  #################

  /cost-centers/:
    get:
      description: List Cost Centers available in this Account
      responses:
        200:
          $ref: '#/responses/costCenterList'

  /cost-centers/{costCenterId}/:
    parameters:
      - $ref: '#/parameters/costCenterId'
    get:
      description: Return a JSON representation of a Cost-Center
      responses:
        200:
          $ref: '#/responses/costCenterDetail'

  #########
  # Roles #
  #########

  /roles/:
    get:
      description: List Roles available in the Account
      responses:
        200:
          $ref: '#/responses/roleList'
    post:
      description: Create a new Role in the Account.
      parameters:
        - $ref: '#/parameters/roleObject'
      responses:
        201:
          $ref: '#/responses/roleDetail'

  /roles/{roleId}/:
    parameters:
      - $ref: '#/parameters/roleId'
    get:
      description: Retrieve a Role.
      responses:
        200:
          $ref: '#/responses/roleDetail'
    patch:
      description: Change Role attributes.
      parameters:
        - $ref: '#/parameters/roleObject'
      responses:
        200:
          $ref: '#/responses/roleDetail'
    delete:
      description: Delete specified Role from the Account.
      responses:
        200:
          $ref: '#/responses/deleteSuccessResponse'


  /roles/{roleId}/images/:
    parameters:
      - $ref: '#/parameters/roleId'
    get:
      description: List Images associated with this Role.
      responses:
        200:
          $ref: '#/responses/roleImageList'
    post:
      description: < 
        Associate a new Image with this Role. 
        This may fail if an existing Image conflicts with the 
        Image you are trying to add (i.e. they are in the same location).

      parameters:
        - $ref: '#/parameters/roleImageObject'
      responses:
        201:
          $ref: '#/responses/roleImageDetail'

  /roles/{roleId}/images/{imageId}/:
    parameters:
      - $ref: '#/parameters/roleId'
      - $ref: '#/parameters/imageId'
    get:
      description: Redirects to the Image.
      responses:
        302:
          description: Redirects to the Image.
    delete:
      description: Dis-associate the Image from the Role.
      responses:
        200:
          $ref: '#/responses/deleteSuccessResponse'

  /roles/{roleId}/images/{imageId}/actions/replace/:
    parameters:
      - $ref: '#/parameters/roleId'
      - $ref: '#/parameters/imageId'
    post:
      description: <
        Replace an Image in-place. 
        This allows you to replace an Image without having to dis-associate it and then associate a new one, 
        which may not be possible if a Farm Role is currently using this Image.

      parameters:
        - $ref: '#/parameters/roleImageObject'
      responses:
        200:
          $ref: '#/responses/roleImageDetail'

  /roles/{roleId}/global-variables/:
    parameters:
      - $ref: '#/parameters/roleId'
    get:
      description: List Global Variables associated with the Role.
      responses:
        200:
          $ref: '#/responses/globalVariableList'
    post:
      description: Declare a new Global Variable for the Role.
      parameters:
        - $ref: '#/parameters/globalVariableObject'
      responses:
        201:
          $ref: '#/responses/globalVariableDetail'

  /roles/{roleId}/global-variables/{globalVariableName}/:
    parameters:
      - $ref: '#/parameters/roleId'
      - $ref: '#/parameters/globalVariableName'
    get:
      description: Retrieve a Global Variable's value in the Role's scope.
      responses:
        200:
          $ref: '#/responses/globalVariableDetail'
    patch:
      description: Update a Global Variable's value in the Role's scope.
      parameters:
        - $ref: '#/parameters/globalVariableObject'
      responses:
        202:
          $ref: '#/responses/globalVariableDetail'
    delete:
      description: Delete a Global Variable from this Role's scope
      responses:
        200:
          $ref: '#/responses/deleteSuccessResponse'

  /roles/{roleId}/orchestration-rules/:
    parameters:
      - $ref: '#/parameters/roleId'
    get:
      description: List Orchestration Rules associated with the Role, including Rules from other Scopes (those are read-only).
      responses:
        200:
          $ref: '#/responses/orchestrationRuleList'
    post:
      description: Associate a new Orchestration Rule with the Role.
      parameters:
        - $ref: '#/parameters/orchestrationRuleObject'
      responses:
        201:
          $ref: '#/responses/orchestrationRuleDetail'

  /roles/{roleId}/orchestration-rules/{orchestrationRuleId}/:
    parameters:
      - $ref: '#/parameters/roleId'
      - $ref: '#/parameters/orchestrationRuleId'
    get:
      description: Retrieve an Orchestration Rule.
      responses:
        200:
          $ref: '#/responses/orchestrationRuleDetail'
    patch:
      description: Update an Orchestration rule.
      parameters:
        - $ref: '#/parameters/orchestrationRuleObject'
      responses:
        202:
          $ref: '#/responses/orchestrationRuleDetail'
    delete:
      description: Delete an Orchestration Rule associated with this Role
      responses:
        200:
          $ref: '#/responses/deleteSuccessResponse'

  ##########
  # Images #
  ##########

  /images/:
    get:
      description: List Images available in the Account.
      responses:
        200:
          $ref: '#/responses/imageList'
    post:
      description: Register a new Image in the Account.
      parameters:
        - $ref: '#/parameters/imageObject'
      responses:
        201:
          $ref: '#/responses/imageDetail'

  /images/{imageId}/:
    parameters:
        - $ref: '#/parameters/imageId'
    get:
      description: Retrieve an Image.
      responses:
        200:
          $ref: '#/responses/imageDetail'
    patch:
      description: Change image attributes. Only the name be can changed.
      parameters:
        - name: image
          in: body
          description: The updated definition.
          required: true
          schema:
            $ref: '#/definitions/Image'
      responses:
        200:
          $ref: '#/responses/imageDetail'
    delete:
      description: De-register an Image from the Account.
      parameters:
        - name: cloudDelete
          description: Attempt to delete this Image from the Cloud.
          in: query
          type: boolean
          required: false
      responses:
        200:
          $ref: '#/responses/deleteSuccessResponse'
        202:
          description: Image scheduled for de-registration and deletion.

  /images/{imageId}/actions/copy/:
    parameters:
      - $ref: '#/parameters/imageId'
    post:
      description: Copy an image from one EC2 region to another.
      parameters:
        - name: copyTo
          description: The EC2 region to copy this Image to.
          in: body
          required: true
          schema:
            $ref: '#/definitions/CloudLocation'
      responses:
        202:
          $ref: '#/responses/imageDetail'

  ######
  # OS #
  ######

  /os/:
    get:
      description: Retrieve a list of Operating Systems available in the Account.
      responses:
        200:
          $ref: '#/responses/osList'

  /os/{osId}/:
    parameters:
      - $ref: '#/parameters/osId'
    get:
      description: Retrieve an OS.
      responses:
        200:
          $ref: '#/responses/osDetail'

  ##########
  # Events #
  ##########

  /events/:
    get:
      description: Retrieve a list of Events available in the Account.
      responses:
        200:
          $ref: '#/responses/eventList'
    post:
      description: Create a new Custom Event in the Account.
      parameters:
        - $ref: '#/parameters/eventObject'
        - name: replace
          in: query
          description: Forces the replacement of the Events declared at lower scopes.
          type: boolean
          required: false
      responses:
        201:
          $ref: '#/responses/eventDetail'

  /events/{eventId}/:
    parameters:
      - $ref: '#/parameters/eventId'
    get:
      description: Retrieve an Event.
      responses:
        200:
          $ref: '#/responses/eventDetail'
    patch:
      description: Change Event attributes.
      parameters:
        - $ref: '#/parameters/eventObject'
      responses:
        200:
          $ref: '#/responses/eventDetail'
    delete:
      description: Delete the Event from the Account.
      responses:
        200:
          $ref: '#/responses/deleteSuccessResponse'


  #####################
  # Cloud Credentials #
  #####################

  /cloud-credentials/:
    get:
      description: List available Cloud Credentials
      responses:
        200:
          $ref: '#/responses/cloudCredentialsSummaryList'
    post:
      description: Create Cloud Credentials for Account scope
      parameters:
        - $ref: '#/parameters/cloudCredentialsObject'
      responses:
        201:
          $ref: '#/responses/cloudCredentialsDetail'

  /cloud-credentials/{cloudCredentialsId}/:
    parameters:
      - $ref: '#/parameters/cloudCredentialsId'
    get:
      description: <
        Gets detailed information about specified Cloud Credentials.
        You can only obtain information about Cloud Credentials from current scope.

      responses:
        200:
          $ref: '#/responses/cloudCredentialsDetail'
    patch:
      description: Modify Cloud Credentials object.
      parameters:
        - $ref: '#/parameters/cloudCredentialsObject'
      responses:
        200:
          $ref: '#/responses/cloudCredentialsDetail'
    delete:
      description: Removes Cloud Credentials.
      responses:
        200:
          description: Cloud Credentials delete

definitions:

  CloudCredentialsSummary:
    properties:
      id:
        type: string
        readOnly: true
        description: Unique identifier of Cloud Credentials object.
      name:
        type: string
        description: Unique name of the Cloud Credentials.
      description:
        type: string
      cloudCredentialsType:
        type: string
        enum:
          - AwsCloudCredentials
          - GceCloudCredentials
          - AzureCloudCredentials
          - CloudstackCloudCredentials
          - OpenstackCloudCredentials
          - RackspaceCloudCredentials
        description: "Cloud Platform this resources resides in."
      status:
        type: string
        enum:
          - disabled
          - enabled
          - suspended
        readOnly: true
        description: The status of Cloud Credentials.
      scope:
        <<: *scopeProperty
        readOnly: true
        type: string
        description: The scope in which the Cloud Credentials are added.
      provider:
        type: string
        description: Cloud provider for Openstack or Cloudstack based clouds

    required:
      - name
      - cloudCredentialsType

    x-createOnly:
      - name
      - cloudCredentialsType

    x-filterable:
      - name
      - cloud
      - status
      - scope
      - provider


  CloudCredentials:
    discriminator: cloudCredentialsType

    allOf:
      - $ref: '#/definitions/CloudCredentialsSummary'


  AwsDetailedBilling:
    properties:
      payerAccount:
        type: string
        description: Payer AWS account number.
      cloudLocation:
        type: string
        description: Billing bucket region.
      bucket:
        type: string
        description: Billing bucket name.


  AwsCloudCredentials:
    allOf:
      - $ref: '#/definitions/CloudCredentials'
      - properties:
          accountType:
            type: string
            enum:
              - regular
              - govcloud
              - china
            default: regular
            description: AWS Account type.
          accessKey:
            type: string
            description: Acces key ID.
          secretKey:
            type: string
            description: The secret key.
          accountId:
            type: string
            readOnly: true
            description: AWS Account ID.
          billing:
            $ref: "#/definitions/AwsDetailedBilling"

    required:
      - accountType
      - accessKey
      - secretKey

    x-filterable:
      - accountType


  GceCloudCredentials:
    allOf:
      - $ref: '#/definitions/CloudCredentials'
      - properties:
          projectId:
            type: string
            description: GCE project ID.
          clientId:
            type: string
            description: GCE client ID.
          accountName:
            type: string
            description: The service account name.
          privateKey:
            type: string
            format: byte
            description: Private key with boundary.

    required:
      - projectId
      - clientId
      - accountName
      - privateKey

  OpenstackCloudCredentials:
    allOf:
      - $ref: '#/definitions/CloudCredentials'
      - properties:
          keystoneUrl:
            type: string
            description: Keystone URL.
          userName:
            type: string
            description: The user name.
          password:
            type: string
            description: The password for the user.
          tenantName:
            type: string
            descriptions: The tenant name.
          domainName:
            type: string
            description: Domain name. It must be provided for the Identity API v3
          sslVerification:
            type: boolean
            description: Specifies whether it should verify SSL Certificate.
          provider:
            <<: *openstackProvider

    required:
      - provider
      - keystoneUrl
      - userName
      - password
      - tenantName

    x-createOnly:
      - provider

  CloudstackCloudCredentials:
    allOf:
      - $ref: '#/definitions/CloudCredentials'
      - properties:
          apiUrl:
            type: string
            description: "The URL like: http(s)://<cloudstack_ip>:<cloudstack_port>/client/api"
          apiKey:
            type: string
            description: The API key.
          secretKey:
            type: string
            description: The secret key.
          provider:
            <<: *cloudstackProvider

    required:
      - provider
      - apiUrl
      - apiKey
      - secretKey

    x-createOnly:
      - provider

  RackspaceCloudCredentials:
    allOf:
      - $ref: '#/definitions/CloudCredentials'
      - properties:
          userName:
            type: string
            description: The user name.
          apiKey:
            type: string
            description: The API access key.
          isUk:
            type: boolean
            description: Indicates is Rackspace UK.

    required:
      - username
      - apiKey

    x-createOnly:
      - isUk

  AzureCloudCredentials:
    allOf:
      - $ref: '#/definitions/CloudCredentials'
      - properties:
          tenantName:
            type: string
            description: The Azure Active Directory name.
          subscription:
            type: string
            description: The Azure Subscription ID.

    required:
      - tenantName
      - subscription

  GlobalVariable:
    required:
      - name
    x-createOnly:
      - name
    properties:
      name:
        type: string
      value:
        description: 'The value declared in the current scope for this variable.  null allows inheritance. Any other value overrides inheritance.  This is ignored if `declaredIn` is not the current scope.'
        type: string
      category:
        description: Category of the variable
        type: string
      declaredIn:
        description: "Whether this variable is declared in the current scope."
        <<: *scopeProperty
        readOnly: true
      locked:
        description: 'Whether this variable is locked in inner scopes. This is read-only if `declaredIn` is not the current scope.'
        type: boolean
      hidden:
        description: 'Whether this variable is hidden in inner scopes. This is read-only if `declaredIn` is not the current scope.'
        type: boolean
      requiredIn:
        description: 'The scope where this variable is required. This is read-only if `declaredIn` is not the current scope.'
        <<: *scopeProperty
      outputFormat:
        description: 'The formatting to apply when formatting this variable. This is read-only if `declaredIn` is not the current scope.'
        type: string
      validationPattern:
        description: 'A validation pattern to apply in inner scopes. This is read-only if `declaredIn` is not the current scope.'
        type: string
      description:
        description: 'A description that explains what this Global Variable is used for.'
        type: string
      computedValue:
        description: 'The value computed by Scalr for this variable.'
        type: string
        readOnly: true
      computedCategory:
        description: 'The category computed by Scalr for this variable.'
        type: string
        readOnly: true

  FarmRoleForeignKey:
    properties:
      id:
        type: integer
        readOnly: true

  OrchestrationRule:
    required:
      - trigger
      - action
      - target
    x-filterable:
      - id
    properties:
      id:
        type: integer
        readOnly: true

      scope:
        <<: *scopeProperty
        readOnly: true

      # When?
      trigger:
        $ref: '#/definitions/Trigger'

      # What?
      action:
        $ref: '#/definitions/Action'

      # Where?
      target:
        $ref: '#/definitions/Target'

      # Execution options
      blocking:
        type: boolean
        description: "Should this Orchestration Rule's execution delay the execution of further Orchestration Rules and triggering of further Events? Defaults to the action's default when null."

      timeout:
        type: integer
        description: "How long should Scalr wait before aborting the execution of this Orchestration Rule? Defaults to the action's default when null."

      order:
        type: integer
        description: "When should this Orchestration Rule execute relative to other Orchestration Rules that use the same triggeringEvent? Default is relative to existing Rules."

      runAs:
        type: string
        descrition: "User the Orchestration Rule should execute as. Defaults to root / Administrator when null."


  Trigger:
    discriminator: triggerType
    properties:
      triggerType:
        type: string
        enum:
          - AllEventsTrigger
          - SpecificEventTrigger
    required:
      - triggerType

  AllEventsTrigger:
    allOf:
      - $ref: "#/definitions/Trigger"
      - description: "Triggers when any Event fires"

  SpecificEventTrigger:
    allOf:
      - $ref: "#/definitions/Trigger"
      - description: "Triggers when a specific Event fires"
      - properties:
          event:
            $ref: '#/definitions/Event'
    required:
      - event


  Action:
    discriminator: actionType
    properties:
      actionType:
        type: string
        enum:
          - ScriptAction
          - UriAction
          - ChefAction
    required:
      - actionType

  ScriptAction:
    allOf:
      - $ref: "#/definitions/Action"
      - properties:
          scriptVersion:
            $ref: '#/definitions/ScriptVersionForeignKey'
            description: "ScriptVersion to execute."
    required:
      - scriptVersion


  Script:
    x-filterable:
      - id
      - name
      - osType
      - blockingDefault
      - scope
    required:
      - id
      - name
      - scope
      - osType
    x-createOnly:
      - osType
    properties:
      id:
        type: integer
        readOnly: true

      name:
        type: string

      scope:
        <<: *scopeProperty
        readOnly: true

      description:
        type: string

      added:
        type: string
        format: date-time
        readOnly: true

      lastChanged:
        type: string
        format: date-time
        readOnly: true

      osType:
        # Ideally this would be a FK of sorts, but there is no object to point to.
        # The user is expected to tell us whether this script should execute.
        type: string
        enum:
          - linux
          - windows
        description: "Type of OS this Script should execute on. This will influence Orchestration Rules, an will trigger validation on individual ScriptVersion's you upload."

      blockingDefault:
        # No filtering available here because there is largely no use case for it (and a big performance cost)
        type: boolean

      timeoutDefault:
        type: integer

      #useScriptParameters:
      #  type: boolean
      #  default: false
      #  desciption: "Whether Script Parameters (%param%) should be used for this Script."

      ## createdBy - We'll add when we have an API for users

  ScriptVersionForeignKey:
    required:
      - script
    x-createOnly:
      - script
    x-filterable:
      - script
    properties:
      script:
        $ref: '#/definitions/ScriptForeignKey'
        description: "The Script this ScriptVersion is a version of"

      version:
        type: integer
        readOnly: true
        description: "The Script version number. NULL is interpreted as the Latest Version."

  UriAction:
    allOf:
      - $ref: "#/definitions/Action"
      - properties:
          path:
            type: string
            description: "Path or URL to the script to execute."
        required:
          - path

  # TODO: design ChefAction
  ChefAction:
    allOf:
      - $ref: "#/definitions/Action"


  Target:
    discriminator: targetType
    properties:
      targetType:
        type: string
        enum:
          - NullTarget
          - TriggeringServerTarget
          - TriggeringFarmRoleTarget
          - SelectedFarmRolesTarget
          - FarmTarget
    required:
      - targetType


  NullTarget:
    allOf:
      - $ref: "#/definitions/Target"
      - description: "Selects no Server at all"

  TriggeringServerTarget:
    allOf:
      - $ref: "#/definitions/Target"
      - description: "Selects the Server that triggered the Event"

  TriggeringFarmRoleTarget:
    allOf:
      - $ref: "#/definitions/Target"
      - description: "Selects all Servers of the triggering Server's Farm Role"

  SelectedFarmRolesTarget:
    allOf:
      - $ref: "#/definitions/Target"
      - properties:
          roles:
            type: array
            items:
              $ref: "#/definitions/FarmRoleForeignKey"
      - description: "Selects all Servers with specified Roles"

  FarmTarget:
    allOf:
      - $ref: "#/definitions/Target"
      - description: "Selects all Servers of the triggering Server's Farm"

  CostCenter:
    properties:
      id:
        type: string
        readOnly: true

      billingCode:
        type: string
        readOnly: true

      name:
        type: string

    required:
      - name

    x-filterable:
      - id
      - name
      - billingCode


  CloudLocation:
    required:
      - cloudPlatform
    x-filterable:
      - cloudPlatform
      - cloudLocation
    properties:
      <<: *cloudLocationProperties

  Event:
    required:
      - id
    x-filterable:
      - id
      - scope
    x-createOnly:
      - id
    properties:
      id:
        type: string
        description: "The name of this custom event"

      scope:
        <<: *scopeProperty
        readOnly: true

      description:
        type: string

  Role:
    required:
      - name
      - category
      - os
    x-filterable:
      - id
      - name
      - os
      - category
      - scope
      - quickStart
      - deprecated
    properties:
      id:
        type: integer
        readOnly: true
      name:
        type: string
      description:
        type: string
      os:
        $ref: '#/definitions/OsForeignKey'
      category:
        $ref: '#/definitions/RoleCategoryForeignKey'
      scope:
        <<: *scopeProperty
        readOnly: true
      quickStart:
        type: boolean
        description: Whether it is QuickStart Role.
      deprecated:
        type: boolean
        description: Whether the Role is deprecated.

  RoleCategory:
    required:
      - name
    x-filterable:
      - id
      - name
      - scope
    x-createOnly:
      - name
    properties:
      id:
        type: integer
        readOnly: true
      name:
        type: string
      scope:
        <<: *scopeProperty
        readOnly: true

  Image:
    required:
      - name
      - cloudPlatform
      - cloudImageId
      - architecture
      - os
    x-filterable:
      - id
      - name
      - scope
      - cloudPlatform
      - cloudLocation
      - cloudImageId
      - architecture
      - source
      - status
      - deprecated
      - os
    properties:
      id:
        type: string
        readOnly: true
      name:
        type: string
      scope:
        <<: *scopeProperty
        readOnly: true

      cloudImageId:
        type: string
      size:
        type: integer
        readOnly: true
      type:
        description: "(Only used on EC2 currently) Whether this Image is HVM or EBS."
        type: string
        readOnly: true
      <<: *cloudLocationProperties

      source:
        description: Indicates how this Image was created.
        type: string
        enum:
          - Manual
          - BundleTask
        readOnly: true
      # bundleTask: pending on an API for Bundle Tasks
      # createdBy pending on an API for users

      os:
        $ref: '#/definitions/OsForeignKey'
      architecture:
        <<: *architectureProperty

      added:
        description: Date and time when this Image was created.
        type: string
        format: date-time
        readOnly: true
      lastUsed:
        description: Date and time when this Image was last used.
        type: string
        format: date-time
        readOnly: true

      status:
        description: "Current status for this Image. Not that `delete` means deletion is underway, and `failed` means deletion failed."
        type: string
        enum:
          - active
          - delete
          - failed
        readOnly: true
      statusError:
        description: If the Image is in a failed state, this indicates why.
        type: string
        readOnly: true

      deprecated:
        description: Whether this Image is deprecated.
        type: boolean
        readOnly: true

  RoleImage:
    description: "A Representation of a Role Image. Note that the `role` property is optional when POST-ing to a URL that already includes `{roleId}`."
    required:
      - role
      - image
    x-filterable:
      - role
      - image
    properties:
      role:
        $ref: '#/definitions/RoleForeignKey'
      image:
        $ref: '#/definitions/ImageForeignKey'

  Os:
    required:
      - id
      - name
      - family
      - generation
      - version
    x-filterable:
      - id
      - name
      - family
      - generation
    properties:
      id:
        type: string
        description: An ID uniquely identifying this OS in Scalr.
      name:
        type: string
        description: A human-readable name for this OS.
      family:
        type: string
        enum:
          - oel
          - debian
          - ubuntu
          - rhel
          - redhat
          - centos
          - amazon
          - windows
      generation:
        type: string
        # Note: there will need to be some validation that family and generation match!
      version:
        type: string

  ApiMetaContainer:
    properties:
      sample:
        type: string
        description: Actual properties TBD

  ApiMessage:
    properties:
      code:
        type: string
        description: A machine-readable representation of the message
      message:
        type: string
        description: A human-readable representation of the message

  ApiErrorResponse:
    properties:
      errors:
        type: array
        items:
          $ref: '#/definitions/ApiMessage'
        readOnly: true